name: AI Code Quality and Security Check

on:
  pull_request:
    branches:
      - master

permissions:
  contents: read
  pull-requests: write

jobs:
  AI-Quality-Security-Check:
    runs-on: ubuntu-latest
    env:
      CODE_REVIEW_PATHS: "web/modules/custom/* web/themes/custom/*"
      CODE_REVIEW_FILE_EXCLUDE_REGEX: ${{ vars.CODE_REVIEW_FILE_EXCLUDE_REGEX }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history for proper diff

      - name: Gather full code from changed files
        id: gather_code
        run: |
          # ------------------------------------------------------------------------------
          # Organization Variable Documentation
          #
          # This script/workflow relies on several organization-level GitHub Actions variables,
          # each of which can be centrally defined (org-level) or overridden for individual repos
          # by creating a repository variable of the same name.
          #
          # VARIABLES:
          #
          #   CODE_REVIEW_PATHS
          #       - Space-separated list of glob patterns for directories/files to review.
          #       - Default (org-level): "web/modules/custom/* web/themes/custom/*"
          #       - To customize for a repository, add a repository variable named CODE_REVIEW_PATHS.
          #
          #   CODE_REVIEW_FILE_EXCLUDE_REGEX
          #       - Pipe-separated (|) regular expression.
          #       - Any matching file or directory will be excluded from review.
          #       - Default (org-level) covers typical dependencies, build outputs, static and binary assets, etc.
          #       - To override for a repo, add a repository variable of the same name.
          #
          #   OPENAI_CODE_REVIEW_PROMPT
          #       - The main prompt text sent to the OpenAI model describing review expectations.
          #       - Set at org level for consistency; override per repo as needed.
          #
          #   OPENAI_CODE_REVIEW_MODEL
          #       - Specifies the OpenAI model to use (e.g., "gpt-4o", "gpt-4").
          #       - Set at org level for consistency and management.
          #
          #   OPENAI_API_KEY
          #       - (Secret) The API key for authenticating to the OpenAI service.
          #       - Set as an org secret; override per repo for additional isolation or testing.
          #
          # OVERRIDING ORG VARIABLES:
          #
          #   To override any variable or secret for your project:
          #     - Go to: your repo → Settings → Secrets and variables → Actions
          #     - Add a new variable/secret with the SAME NAME as the org variable to override it.
          #     - For details, see GitHub’s documentation:
          #       https://docs.github.com/en/actions/learn-github-actions/variables
          #
          # This approach keeps common config centralized but supports per-repo customization.
          # ------------------------------------------------------------------------------
          #
          # Get changed files, filtering out those that match the exclusion regex
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD $CODE_REVIEW_PATHS)

          # Build a JSON array containing filenames and their content
          echo '{"original files": [' > original_files_temp.json

          if [ -n "$CHANGED_FILES" ]; then
            CHANGED_FILES=$(echo "$CHANGED_FILES" | grep -Ev "$CODE_REVIEW_FILE_EXCLUDE_REGEX" || true)
          fi

          if [ -n "$CHANGED_FILES" ]; then
            for file in $CHANGED_FILES; do
              if [ -f "$file" ]; then
                CONTENT=$(jq -Rs . < "$file")
                echo "{\"filename\": \"$file\", \"content\": $CONTENT}," >> original_files_temp.json
              fi
            done
            # Remove trailing comma on the last file entry
            sed -i '$ s/,$//' original_files_temp.json
            echo "has_changed_files=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changed files found matching the specified paths." >&2
            echo "has_changed_files=false" >> "$GITHUB_OUTPUT"
          fi

          # Always close JSON array
          echo "]}" >> original_files_temp.json

      - name: Display processed diff
        if: ${{ steps.gather_code.outputs.has_changed_files == 'true' }}
        run: cat original_files_temp.json

      - name: Get diff
        if: ${{ steps.gather_code.outputs.has_changed_files == 'true' }}
        run: |
          # Parse filtered file paths from the JSON
          FILES_FROM_JSON=$(jq -r '."original files"[].filename' original_files_temp.json)

          # Generate the diff for only these files
          if [ -n "$FILES_FROM_JSON" ]; then
            git diff origin/${{ github.event.pull_request.base.ref }}...HEAD -- $FILES_FROM_JSON \
              | grep '^[+-]' | grep -Ev '^(---|\+\+\+)' > code_changes_only.txt
          else
            echo '' > code_changes_only.txt
          fi

          jq -Rs '{diff: .}' code_changes_only.txt > diff.json

          if [ -f original_files_temp.json ]; then
            jq -s '.[0] * .[1]' diff.json original_files_temp.json > combined.json
            mv combined.json diff.json
          fi

      - name: Display Processed Diff (Debug)
        if: ${{ steps.gather_code.outputs.has_changed_files == 'true' }}
        run: cat diff.json

      - name: Analyze with OpenAI
        if: ${{ steps.gather_code.outputs.has_changed_files == 'true' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          DIFF_CONTENT=$(jq -r '.diff' diff.json)
          ORIGINAL_FILES=$(jq -r '."original files"' diff.json)
          PROMPT="${{ vars.OPENAI_CODE_REVIEW_PROMPT }}:\n\nDIFF:\n${DIFF_CONTENT}\n\nORIGINAL FILES:\n${ORIGINAL_FILES}"
          jq -n --arg prompt "$PROMPT" --arg model "${{ vars.OPENAI_CODE_REVIEW_MODEL }}" '{
            "model": $model,
            "messages": [
              { "role": "system", "content": "You are an expert Drupal code reviewer." },
              { "role": "user", "content": $prompt }
            ]
          }' > request.json
          curl -sS https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -d @request.json > response.json

      - name: Extract Review Message
        if: ${{ steps.gather_code.outputs.has_changed_files == 'true' }}
        id: extract_message
        run: |
          ASSISTANT_MSG=$(jq -r '.choices[0].message.content' response.json)
          {
            echo "message<<EOF"
            echo "$ASSISTANT_MSG"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          echo $ASSISTANT_MSG

      - name: Post Comment to PR
        if: ${{ steps.gather_code.outputs.has_changed_files == 'true' }}
        env:
          COMMENT: ${{ steps.extract_message.outputs.message }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -f body="$COMMENT"
